package main

import (
	"bytes"
	"crypto/md5"
	"fmt"
	"go/format"
	"io"
	"io/ioutil"
	"log"
	"os"
	"path"
	"path/filepath"
	"reflect"
	"sort"
	"strings"
	"text/template"
)

func main() {
	var name string
	var file string
	switch len(os.Args) {
	case 3:
		name = os.Args[2]
		file = os.Args[1]
	case 2:
		file = os.Args[1]
		if file != "-" {
			name = file
		} else {
			name = "sample"
		}
	case 1:
		name = "sample"
		file = "-"
	default:
		log.Fatal("too many arguments")
	}
	var f io.Reader
	switch file {
	case "-":
		f = os.Stdin
	default:
		fic, err := os.Open(file)
		if err != nil {
			log.Fatal(err)
		}
		defer fic.Close()
		f = fic
	}
	/*
		content, err := ioutil.ReadAll(os.Stdin)
		portraitLeft := md5.Sum(content[2480343:2551487]))
		landscapeLeft := md5.Sum(content[93530:2551487]))
		sigPortraitLeft := []byte{198, 104, 128, 15, 244, 220, 201, 184, 37, 102, 121, 114, 251, 0, 76, 100}

		if compareSig(sigPortraitLeft, portraitLeft) {
			fmt.Println("portrait left")
		}
	*/
	b := make([]byte, 1)
	content, err := ioutil.ReadAll(f)
	rdr := bytes.NewReader(content)
	groups := make([][2]int, 0)
	window := 200
	var inGroup bool
	var startGroup int
	var lastOff int
	var off int
	for off = 0; err == nil; off++ {
		_, err = rdr.Read(b)
		if reflect.DeepEqual(b, []byte{0}) {
			if !inGroup {
				startGroup = off
				inGroup = true
				groups = append(groups, [2]int{startGroup, 0})
			}
			if off-startGroup > window {
				groups[len(groups)-1][1] = lastOff
				inGroup = false
			}
			lastOff = off
		}
	}
	if groups[len(groups)-1][1] == 0 {
		groups = groups[:len(groups)-1]
	}
	sort.Sort(sort.Reverse(byGroupSize(groups)))
	displayCodeChecking(name, content, groups[0])
}

type byGroupSize [][2]int

func (b byGroupSize) Len() int {
	return len(b)
}
func (b byGroupSize) Swap(i, j int) {
	b[i], b[j] = b[j], b[i]
}
func (b byGroupSize) Less(i, j int) bool {
	return b[i][1]-b[i][0] < b[j][1]-b[j][0]
}

func displayCodeChecking(name string, content []byte, g [2]int) {
	name = path.Base(name)
	var extension = filepath.Ext(name)
	name = name[0 : len(name)-len(extension)]

	t := template.Must(template.New("sample").Parse(tmpl))
	type data struct {
		Name  string
		Sig   string
		Start int
		End   int
	}
	var b bytes.Buffer
	t.Execute(&b, data{
		Name:  strings.Title(strings.ToLower(name)),
		Sig:   strings.Replace(strings.Trim(fmt.Sprint(md5.Sum(content[g[0]:g[1]])), "[]"), " ", ",", -1),
		Start: g[0],
		End:   g[1],
	})
	out, err := format.Source(b.Bytes())
	if err != nil {
		log.Fatal(err)
	}
	fmt.Println(string(out))
}

// portraitLeft := []int{}
// landsxcapeLeft := []int{76694,76695,76696,76697,76698,76699,76700,76701,76702,78563,78564,78565,78566,78567,78568,78569,78570,78571,78572,78573,78574,78575,78576,78577,80433,80434,80435,80436,80437,80438,80439,80440,80441,80442,80443,80444,80445,80446,80447,80448,80449,80450,80451,82304,82305,82306,82307,82308,82309,82310,82318,82319,82320,82321,82322,82323,82324,82325,84174,84175,84176,84177,84178,84179,84193,84194,84195,84196,84197,84198,86045,86046,86047,86048,86049,86067,86068,86069,86070,86071,87916,87917,87918,87919,87920,87941,87942,87943,87944,89787,89788,89789,89790,89791,89814,89815,89816,89817,91659,91660,91661,91662,91687,91688,91689,91690,93530,93531,93532,93533,93560,93561,93562,93563,95401,95402,95403,95404,95433,95434,95435,97273,97274,97275,97276,97305,97306,97307,97308,99145,99146,99147,99178,99179,99180,101016,101017,101018,101019,101050,101051,101052,102888,102889,102890,102922,102923,102924,102925,104760,104761,104762,104795,104796,104797,106632,106633,106634,106667,106668,106669,108503,108504,108505,108506,108539,108540,108541,110375,110376,110377,110411,110412,110413,112247,112248,112249,112283,112284,112285,114119,114120,114121,114132,114133,114134,114135,114155,114156,114157,115991,115992,115993,115994,116002,116003,116004,116005,116006,116007,116008,116027,116028,116029,117864,117865,117866,117874,117875,117876,117877,117878,117879,117880,117881,117899,117900,117901,119736,119737,119738,119745,119746,119747,119748,119749,119750,119751,119752,119753,119771,119772,119773,121608,121609,121610,121617,121618,121619,121620,121621,121622,121623,121624,121625,121642,121643,121644,121645,123480,123481,123482,123483,123489,123490,123491,123492,123493,123494,123495,123496,123497,123514,123515,123516,125353,125354,125355,125362,125363,125364,125365,125366,125367,125368,125369,125386,125387,125388,127225,127226,127227,127228,127234,127235,127236,127237,127238,127239,127240,127257,127258,127259,127260,129097,129098,129099,129100,129108,129109,129110,129111,129129,129130,129131,130970,130971,130972,130973,131000,131001,131002,131003,132843,132844,132845,132846,132871,132872,132873,132874,134715,134716,134717,134718,134719,134742,134743,134744,134745,136588,136589,136590,136591,136592,136613,136614,136615,136616,138461,138462,138463,138464,138465,138483,138484,138485,138486,138487,140334,140335,140336,140337,140338,140339,140353,140354,140355,140356,140357,140358,142208,142209,142210,142211,142212,142213,142214,142223,142224,142225,142226,142227,142228,142229,144081,144082,144083,144084,144085,144086,144087,144088,144089,144090,144091,144092,144093,144094,144095,144096,144097,144098,144099,144100,145955,145956,145957,145958,145959,145960,145961,145962,145963,145964,145965,145966,145967,145968,145969,145970,147830,147831,147832,147833,147834,147835,147836,147837,147838,147839}

// 2480343:2551487
